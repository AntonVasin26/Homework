1) Какими способамами можно задать значение для данных членов структуры?
1.1) через точку Struct.name = ...
1.2) через стрелочку Struct -> name = ...
1.3) Инициализация по умолчанию
1.4) Использование конструктора Struct(name)
1.5) Агрегатная инициализаци Struct = {"name", "suname"}

2)Для чего преднозначенны списки инициализации
2.1)Инициализации членов позволяют инициализировать члены, а не присваивать им значения. 
Это единственный способ инициализации констант и ссылок, которые являются членами вашего класса.
2.2)Переменные в списке инициализации не инициализируются в том порядке, в котором они указаны.
Вместо этого они инициализируются в том порядке, в котором объявлены в классе.

3)Как идиома RAII реализована с помощью коструктора и деструктора
3.1)Конструктор - выделяет память или другие ресурсы устроиства необходимые для получения информации и 
устанавливает соединение с этими источниками информации (Подключение к серверу, открытие файла). 
3.2)Деструктор - после завершения работы программы освобождает ресурсы которые занял конструктор и 
прерывает соединение (Отключение от сервера, закрытие сервера)

4)Когда стоит рассматривать использование битовых полей
4.1)Экономия памяти когда работаем с данными фиксированного размера (дата, время, номер кабинета)
4.2)Для выравнивания
4.3)Передача в функцию много различных переменных типа True/false. Вместо того чтобы передавать каждую
по отдельности можно зашифровать в одно число и передать это число

5)Какими особенностями обладают перечесления с областью видимости
5.1)Переменные видны только в определенном блоке, что позволяет использовать одинаковые именна в разных блоках.
5.2)перечисление с областью видимостью и перечислении без области видимости отличаются тем 
что переменные перечислений с областью видимости не могут неявно преобразовываться в целочисленные переменные и обратно.
Для такого преобразования следует использовать static_cast<int>().